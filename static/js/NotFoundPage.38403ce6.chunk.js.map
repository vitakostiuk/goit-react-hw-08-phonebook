{"version":3,"file":"static/js/NotFoundPage.38403ce6.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","components/pages/NotFoundPage.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/phonebook/phonebook-operations';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = shortid.generate();\n  const numberId = shortid.generate();\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(addContact({ name, number }));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.ContactForm} onSubmit={handleSubmit}>\n      <div className={s.InputWrapper}>\n        <label className={s.Label} htmlFor={nameId}>\n          Name\n        </label>\n        <input\n          id={nameId}\n          className={s.Input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n\n      <div className={s.InputWrapper}>\n        <label className={s.Label} htmlFor={numberId}>\n          Number\n        </label>\n        <input\n          id={numberId}\n          className={s.Input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <button type=\"submit\" className={s.FormBtn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from '../ContactForm';\n\nconst NotFound = () => {\n  return (\n    <>\n      <ContactForm />\n    </>\n  );\n};\n\nexport default NotFound;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactForm\":\"ContactForm_ContactForm__QuT-m\",\"InputWrapper\":\"ContactForm_InputWrapper__xYPub\",\"Label\":\"ContactForm_Label__ykus5\",\"Input\":\"ContactForm_Input__+bOEZ\",\"FormBtn\":\"ContactForm_FormBtn__qtcqm\"};"],"names":["useState","name","setName","number","setNumber","nameId","shortid","numberId","dispatch","useDispatch","handleChange","e","currentTarget","value","className","s","onSubmit","preventDefault","addContact","htmlFor","id","type","onChange","pattern","title","required","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}