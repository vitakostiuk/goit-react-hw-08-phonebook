{"version":3,"file":"static/js/ContactsPage.13de8c70.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/EditForm/EditForm.module.css?d1fc","components/EditForm/EditForm.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/App.module.css","components/pages/ContactsPage.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ContactForm\":\"EditForm_ContactForm__g730m\",\"InputWrapper\":\"EditForm_InputWrapper__gAbKr\",\"Label\":\"EditForm_Label__a5rou\",\"Input\":\"EditForm_Input__Tk3iF\",\"FormBtn\":\"EditForm_FormBtn__Ibl1L\",\"CloseBtn\":\"EditForm_CloseBtn__hY9PD\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from '../../redux/phonebook/phonebook-operations';\nimport PropTypes from 'prop-types';\nimport { MdClose } from 'react-icons/md';\nimport shortid from 'shortid';\nimport s from './EditForm.module.css';\n\nconst EditForm = ({ nameForEdit, numberForEdit, id, toggleModal }) => {\n  const [name, setName] = useState(nameForEdit);\n  const [number, setNumber] = useState(numberForEdit);\n\n  const nameId = shortid.generate();\n  const numberId = shortid.generate();\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const updatedContact = {\n      name,\n      number,\n      id,\n    };\n\n    dispatch(editContact(updatedContact));\n    toggleModal();\n  };\n\n  return (\n    <form className={s.ContactForm} onSubmit={handleSubmit}>\n      <div className={s.InputWrapper}>\n        <label className={s.Label} htmlFor={nameId}>\n          Name\n          <input\n            id={nameId}\n            className={s.Input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n      </div>\n\n      <div className={s.InputWrapper}>\n        <label className={s.Label} htmlFor={numberId}>\n          Number\n          <input\n            id={numberId}\n            className={s.Input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n      </div>\n      <button type=\"submit\" className={s.FormBtn}>\n        Edit contact\n      </button>\n      <button className={s.CloseBtn} onClick={toggleModal}>\n        <MdClose size=\"24\" />\n      </button>\n    </form>\n  );\n};\n\nEditForm.propTypes = {\n  nameForEdit: PropTypes.string.isRequired,\n  numberForEdit: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  toggleModal: PropTypes.func.isRequired,\n};\n\nexport default EditForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"List\":\"ContactList_List__gG+lN\",\"Item\":\"ContactList_Item__Yiq5T\",\"Btn\":\"ContactList_Btn__IP20b\",\"WrapperBtn\":\"ContactList_WrapperBtn__39bvR\"};","import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport EditForm from '../EditForm';\nimport Modal from '../Modal';\nimport s from '../ContactList/ContactList.module.css';\n\nconst ContactListItem = ({ contacts, onDeleteContact }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [name, setName] = useState();\n  const [number, setNumber] = useState();\n  const [id, setId] = useState();\n\n  const toggleEditForm = (id, number, name) => {\n    setName(name);\n    setNumber(number);\n    setId(id);\n    return setShowModal(!showModal);\n  };\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  return (\n    <>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <div className={s.Item}>\n            <span>{name}</span>\n            <span className={s.Number}>{number}</span>\n          </div>\n          <div className={s.WrapperBtn}>\n            <button\n              type=\"button\"\n              className={s.Btn}\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </button>\n\n            <button\n              type=\"button\"\n              className={s.Btn}\n              onClick={() => toggleEditForm(id, number, name)}\n            >\n              Edit\n            </button>\n          </div>\n        </li>\n      ))}\n      {showModal && (\n        <Modal>\n          <EditForm\n            toggleEditForm={toggleEditForm}\n            toggleModal={toggleModal}\n            nameForEdit={name}\n            numberForEdit={number}\n            id={id}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { React, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authSelectors } from 'redux/auth';\nimport {\n  deleteContact,\n  getContacts,\n} from '../../redux/phonebook/phonebook-operations';\nimport ContactListItem from '../ContactListItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const token = useSelector(authSelectors.getToken);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(state =>\n    filteredContacts(state.phonebook.contacts, state.phonebook.filter)\n  );\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={s.List}>\n      {token && (\n        <ContactListItem\n          contacts={contacts}\n          onDeleteContact={onDeleteContact}\n        />\n      )}\n    </ul>\n  );\n};\n\nfunction filteredContacts(allContacts, filter) {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n}\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactForm\":\"ContactForm_ContactForm__QuT-m\",\"InputWrapper\":\"ContactForm_InputWrapper__xYPub\",\"Label\":\"ContactForm_Label__ykus5\",\"Input\":\"ContactForm_Input__+bOEZ\",\"FormBtn\":\"ContactForm_FormBtn__qtcqm\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/phonebook/phonebook-operations';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = shortid.generate();\n  const numberId = shortid.generate();\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(addContact({ name, number }));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.ContactForm} onSubmit={handleSubmit}>\n      <div className={s.InputWrapper}>\n        <label className={s.Label} htmlFor={nameId}>\n          Name\n        </label>\n        <input\n          id={nameId}\n          className={s.Input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n\n      <div className={s.InputWrapper}>\n        <label className={s.Label} htmlFor={numberId}>\n          Number\n        </label>\n        <input\n          id={numberId}\n          className={s.Input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <button type=\"submit\" className={s.FormBtn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/phonebook/phonebook-actions';\nimport shortid from 'shortid';\nimport s from '../ContactForm/ContactForm.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const value = useSelector(state => state.phonebook.filter);\n\n  return (\n    <div className={s.InputWrapper}>\n      <label className={s.Label} htmlFor={shortid.generate()}>\n        Find contacts by name\n      </label>\n      <input\n        type=\"text\"\n        value={value}\n        id={shortid.generate()}\n        className={s.Input}\n        onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\nimport ContactList from '../ContactList';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport s from '../../components/App.module.css';\n\nconst Contacts = ({ toggleModal }) => {\n  return (\n    <>\n      <h2 className={s.Title}>Phonebook</h2>\n      <ContactForm />\n\n      <h2 className={s.Title}>Contacts</h2>\n      <Filter />\n      <ContactList toggleModal={toggleModal} />\n    </>\n  );\n};\n\nContacts.propTypes = {\n  toggleModal: PropTypes.func,\n};\n\nexport default Contacts;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["nameForEdit","numberForEdit","id","toggleModal","useState","name","setName","number","setNumber","nameId","shortid","numberId","dispatch","useDispatch","handleChange","e","currentTarget","value","className","s","onSubmit","preventDefault","updatedContact","editContact","htmlFor","type","onChange","pattern","title","required","onClick","size","contacts","onDeleteContact","showModal","setShowModal","setId","toggleEditForm","map","Modal","token","useSelector","authSelectors","useEffect","getContacts","state","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","filteredContacts","phonebook","deleteContact","addContact","changeFilter","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}